plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.google.cloud.tools.jib' version '3.4.0'
    id "de.undercouch.download" version "5.3.0"
}

group = 'com.slb'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'software.amazon.awssdk:bom:2.27.24'
    implementation 'software.amazon.awssdk:s3:2.27.24'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // db
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.mysql:mysql-connector-j'

    // swagger
    implementation 'org.springdoc:springdoc-openapi:2.3.0'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.8'

    // webflux
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // hash
    implementation 'org.hashids:hashids:1.0.3'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register('downloadNewrelic', Download) {
    mkdir 'newrelic'
    src 'https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip'
    dest file('newrelic')
}

tasks.register('unzipNewrelic', Copy) {
    from zipTree(file('newrelic/newrelic-java.zip'))
    into rootDir
}

jib {
    from {
        image = 'openjdk:17-slim'
    }
    to {
        image = "${project.findProperty("DOCKER_ID")}/${project.findProperty("DOCKER_IMAGE_NAME")}"
        tags = ['latest']
        auth {
            username = project.findProperty("DOCKER_ID")
            password = project.findProperty("DOCKER_PASSWORD")
        }
    }
    extraDirectories {
        paths {
            path {
                setFrom(file("newrelic").toPath())
                into = "/app/newrelic"
            }
        }
    }
    container {
        def activeProfile = project.hasProperty('profile')
                ? project.property('profile')
                : 'local'

        jvmFlags = ['-Xms512m', '-Xmx512m', "-Dspring.profiles.active=${activeProfile}"]

        if (activeProfile == 'local') {
            return
        }

        def newRelicConfig = project.file("newrelic/newrelic.yml")
        def newRelicJar = project.file("newrelic/newrelic.jar")
        if (newRelicConfig.exists() && newRelicJar.exists()) {
            jvmFlags = jvmFlags + [
                    "-Dnewrelic.config.file=/app/newrelic/newrelic.yml",
                    "-javaagent:/app/newrelic/newrelic/newrelic.jar"
            ]
        }
    }
}