name: Docker Hub Push & 개발 서버 EC2 배포

on:
  push:
    branches:
      - develop
  workflow_dispatch: # 수동 실행 이벤트 추가

jobs:
  build:
    name: 빌드 작업
    runs-on: ubuntu-latest

    env:
      SECRET_YML_CONTENT: ${{ secrets.SECRET_YML_CONTENT }}
      DOCKER_ID: ${{ secrets.DOCKER_ID }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: JDK 17 설정
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Gradle 설정
        uses: gradle/gradle-build-action@v2

      - name: application-secret.yml 등록
        run: |
          echo "${{ env.SECRET_YML_CONTENT }}" > src/main/resources/application-secret.yml

      - name: gradle.properties 등록
        run: |
          echo DOCKER_ID="${{ env.DOCKER_ID }}" >> gradle.properties
          echo DOCKER_PASSWORD="${{ env.DOCKER_PASSWORD }}" >> gradle.properties
          echo DOCKER_IMAGE_NAME="${{ env.DOCKER_IMAGE_NAME }}" >> gradle.properties

      - name: Docker Hub에 로그인
        run: echo "${{ env.DOCKER_PASSWORD }}" | docker login -u "${{ env.DOCKER_ID }}" --password-stdin

      - name: Jib로 Docker 이미지 빌드 및 푸시
        run: ./gradlew jib

  deploy:
    name: 개발 서버 EC2 배포
    needs: build
    runs-on: ubuntu-latest

    env:
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}
      EC2_KEY: ${{ secrets.EC2_KEY }}

      # Docker 관련
      CONTAINER_NAME: q-asker-api-server
      DOCKER_ID: ${{ secrets.DOCKER_ID }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}
      # Spring Boot 관련
      MYSQL_URL: ${{ secrets.MYSQL_URL }}
      FRONTEND_URL: https://q-asker.com
      AI_SERVER_URL: ${{ secrets.AI_SERVER_URL }}
      DATASOURCE_USERNAME: ${{ secrets.DATASOURCE_USERNAME }}
      DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}

    steps:
      - name: EC2에 배포
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_KEY }}
          debug: true
          script: |
            echo "${{ env.DOCKER_PASSWORD }}" | docker login -u "${{ env.DOCKER_ID }}" --password-stdin
            docker pull ${{ env.DOCKER_ID }}/${{ env.DOCKER_IMAGE_NAME }}
            docker stop ${{ env.CONTAINER_NAME }} || true
            docker rm ${{ env.CONTAINER_NAME }} || true
            docker run -d --name ${{ env.CONTAINER_NAME }} -p 8080:8080 \
              -e SPRING_DATASOURCE_URL=${{ env.MYSQL_URL }} \
              -e SPRING_DATASOURCE_USERNAME=${{ env.DATASOURCE_USERNAME }} \
              -e SPRING_DATASOURCE_PASSWORD=${{ env.DATASOURCE_PASSWORD }} \
              -e Q-ASKER_FRONTEND-URL=${{ env.FRONTEND_URL }} \
              -e Q-ASKER_AI-SERVER-URL=${{ env.AI_SERVER_URL }} \
              ${{ env.DOCKER_ID }}/${{ env.DOCKER_IMAGE_NAME }}
            docker image prune -af