name: Docker Hub Push & 배포 서버 EC2 배포
on:
  push:
    branches:
      - develop
  workflow_dispatch:

jobs:
  build:
    name: 빌드 작업
    runs-on: ubuntu-latest
    env:
      APPLICATION_PROD_YML: ${{ secrets.APPLICATION_PROD_YML }}
      NEWRELIC_YML: ${{ secrets.NEWRELIC_YML }}
      GRADLE_PROPERTIES: ${{ secrets.GRADLE_PROPERTIES }}

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: 환경변수들 등록
        run: |
          echo "${{ env.NEWRELIC_YML }}" > newrelic/newrelic.yml
          echo "${{ env.APPLICATION_PROD_YML }}" > src/main/resources/application-prod.yml
          echo "${{ env.GRADLE_PROPERTIES }}" > gradle.properties

      - name: JDK 17 설정
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Gradle 설정
        uses: gradle/gradle-build-action@v2

      - name: Jib로 Docker 이미지 빌드 및 푸시
        run: ./gradlew jib -PPROFILE=prod

  deploy:
    name: EC2 배포
    needs: build
    runs-on: ubuntu-latest
    env:
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}
      EC2_KEY: ${{ secrets.EC2_KEY }}

    steps:
      - name: gradle.properties 값 환경 변수로 등록 및 마스킹
        run: |
          # DOCKER_ID 추출, 마스킹, 환경 변수 등록
          DOCKER_ID_VALUE=$(echo "${{ secrets.GRADLE_PROPERTIES }}" | grep '^DOCKER_ID=' | cut -d'=' -f2-)
          echo "DOCKER_ID=$DOCKER_ID_VALUE" >> $GITHUB_ENV
          
          # DOCKER_IMAGE_NAME 추출, 마스킹, 환경 변수 등록
          DOCKER_IMAGE_NAME_VALUE=$(echo "${{ secrets.GRADLE_PROPERTIES }}" | grep '^DOCKER_IMAGE_NAME=' | cut -d'=' -f2-)
          echo "DOCKER_IMAGE_NAME=$DOCKER_IMAGE_NAME_VALUE" >> $GITHUB_ENV
          
          # DOCKER_PASSWORD 추출, 마스킹, 환경 변수 등록
          DOCKER_PASSWORD_VALUE=$(echo "${{ secrets.GRADLE_PROPERTIES }}" | grep '^DOCKER_PASSWORD=' | cut -d'=' -f2-)
          echo "::add-mask::$DOCKER_PASSWORD_VALUE"
          echo "DOCKER_PASSWORD=$DOCKER_PASSWORD_VALUE" >> $GITHUB_ENV
          
          # DOCKER_CONTAINER_NAME 생성, 등록
          DOCKER_CONTAINER_NAME_VALUE="${DOCKER_ID_VALUE}-${DOCKER_IMAGE_NAME_VALUE}"
          echo "DOCKER_CONTAINER_NAME=$DOCKER_CONTAINER_NAME_VALUE" >> $GITHUB_ENV

      - name: EC2에 배포
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_KEY }}
          debug: true
          script: |
            echo "${{ env.DOCKER_PASSWORD }}" | docker login -u "${{ env.DOCKER_ID }}" --password-stdin
            docker pull ${{ env.DOCKER_ID }}/${{ env.DOCKER_IMAGE_NAME }}
            docker stop ${{ env.DOCKER_CONTAINER_NAME }} || true
            docker rm ${{ env.DOCKER_CONTAINER_NAME }} || true
            docker run -d --name ${{ env.DOCKER_CONTAINER_NAME }} -p 8080:8080 -p 9999:9999 ${{ env.DOCKER_ID }}/${{ env.DOCKER_IMAGE_NAME }}
            docker image prune -af